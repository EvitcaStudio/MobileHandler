[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/controller.mjs",
    "content": "import { Tween } from './vendor/tween.min.mjs';\r\nimport { Utils } from './vendor/utils.min.mjs';\r\nimport { MobileHandler } from './mobile-handler.mjs'\r\n\r\n/**\r\n * When using a controller that is of the traversal type, or the static type\r\n * a zone is REQUIRED. Only two controllers of traversal or static or one of each can be used at a time. \r\n * These controllers have to have opposing zones. Left | Right\r\n * Traversal: spawns at the touch position and when dragged, follows the finger across the screen\r\n * Static: spawns at the touch position, cannot move from that location, just updates the joystick and will clamp at its limit\r\n * Stationary: cannot move from it's position at all, will just update the joystick and clamp it at its limit, can be pressed from anywhere on screen.\r\n */\r\nexport class Controller {\r\n    /**\r\n     * A reference to the tween instance this controller uses to tween the alpha when it becomes inactive.\r\n     * This reference is so that developers can pause this tween and resume it when needed.\r\n     * Calling this.tween.pause() and this.tween.resume() for instance when pausing and unpausing the game.\r\n     */\r\n    tween = null;\r\n    /**\r\n     * Builds this controller with the options that were passed in.\r\n     * @param {Object} pOptions - The options of this controller.\r\n     * @param {string} pOptions.type - The way this controller will behave. stationary | traversal | static.\r\n     * @param {number} pOptions.size - The width/height of the joystick. The width & height of the joystick should be the same.\r\n     * @param {Object} pOptions.position - The initial position of the joystick.\r\n     * @param {string} pOptions.position.x - The initial x position of the joystick.\r\n     * @param {string} pOptions.position.x - The initial y position of the joystick.\r\n     * @param {string} pOptions.lockedDimension - The locked dimension of the joystick. both | vertical | horizontal. This is used to lock the joystick from moving in certain dimensions. If this joystick's type is traversal it cannot be locked.\r\n     * @param {string} pOptions.zone - The zone the joystick will occupy. If there is already a controller of the traversal or static type, then you must use a zone. If there is only one controller no zone is needed. left | right This will give each controller equal space on the left / right sides of the screen.\r\n     * @param {number} pOptions.inactiveAlpha - The alpha value the joystick will be when it is considered to be inactive.\r\n     * @param {number} pOptions.transitionTime - How long it takes in ms to transition to the inactiveAlpha value.\r\n     * @param {number} pOptions.scale - The scale you want the joystick controller to be.\r\n     * @param {number} pOptions.plane - The plane of the joystick controller.\r\n     * @param {number} pOptions.layer - The layer of the joystick controller.\r\n     * @param {string} pOptions.atlasName - The atlasName of the joystick.\r\n     * @param {string} pOptions.joystickIconName - The iconName of the joystick.\r\n     * @param {string} pOptions.joyringIconName - The iconName of the joyring.\r\n     * @param {Object} pOptions.callback - An object holding options callbacks to attach to events the joystick emits. \r\n     * pOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\r\n     * pOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\r\n     * pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     * @param {Object} pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     * @param {Function} pOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\r\n     * @param {Function} pOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\r\n     * @param {Function} pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     */\r\n\tconstructor(pOptions) {\r\n\t\tthis.joyring = null;\r\n\t\tthis.joystick = null;\r\n\t\tthis.options = null;\r\n\t\tthis.lockedDimension = null;\r\n        this.tween = new Tween();\r\n\t\tthis.build(pOptions);\r\n\t}\r\n    /**\r\n     * @private\r\n     * Setup the controller with the options that this controller class instance has from being initiated\r\n     */\r\n\tsetup() {\r\n        // Setup the joyring element\r\n\t\tthis.joyring.atlasName = this.options.atlasName;\r\n\t\tthis.joyring.iconName = this.options.joyringIconName;\r\n\t\tthis.joyring.touchOpacity = MobileHandler.constructor.MULTI_TOUCH;\r\n\t\tthis.joyring.interfaceType = 'default';\r\n\t\tthis.joyring.color = { 'tint': 0xFFFFFF };\r\n\t\tthis.joyring.scale = 1;\r\n\t\tthis.joyring.anchor = { 'x': 0.5, 'y': 0.5 };\r\n\t\tthis.joyring.plane = this.options.plane;\r\n\t\tthis.joyring.layer = this.options.layer;\r\n\t\tthis.joyring.width = this.options.size;\r\n\t\tthis.joyring.height = this.options.size;\r\n\t\tthis.joyring.halfSize = this.joyring.width / 2;\r\n\t\tthis.joyring.child = this.joystick;\r\n\t\tthis.joyring.isMobileHandlerController = true;\r\n\t\tthis.joyring.originalPos = { 'x': this.options.position.x, 'y': this.options.position.y };\r\n\t\tthis.joyring.onNew = () => {};\r\n        // Setup the joystick element\r\n\t\tthis.joystick.atlasName = this.options.atlasName;\r\n\t\tthis.joystick.iconName = this.options.joystickIconName;\r\n\t\tthis.joystick.touchOpacity = MobileHandler.constructor.NO_TOUCH;\r\n\t\tthis.joystick.interfaceType = 'default';\r\n\t\tthis.joystick.color = { 'tint': 0xFFFFFF };\r\n\t\tthis.joystick.scale = 1;\r\n\t\tthis.joystick.anchor = { 'x': 0.5, 'y': 0.5 };\r\n\t\tthis.joystick.startPos = { 'x': 0, 'y': 0 };\r\n\t\tthis.joystick.width = this.options.size / 2;\r\n\t\tthis.joystick.height = this.options.size / 2;\r\n\t\tthis.joystick.plane = this.options.plane;\r\n        // The inner ring must be layered above the outer ring\r\n\t\tthis.joystick.layer = this.options.layer + 1;\r\n\t\tthis.joystick.anglePoint = 0;\r\n\t\tthis.joystick.direction = 'none';\r\n\t\tthis.joystick.halfSize = this.joystick.width / 2;\r\n\t\tthis.joystick.parent = this.joyring;\r\n\t\tthis.joystick.originalPos = { 'x': this.joyring.originalPos.x + this.joystick.halfSize, 'y': this.joyring.originalPos.y + this.joystick.halfSize };\r\n\t\tthis.joystick.onNew = () => {};\r\n        // Keep references to this joystick\r\n\t\tthis.joyring.controller = this;\r\n\t\tthis.joystick.controller = this;\r\n        // Assign event funcs\r\n\t\tthis.onTapStart = this.options.callback.onTapStart;\r\n\t\tthis.onRelease = this.options.callback.onRelease;\r\n\t\tthis.onMove = this.options.callback.onMove;\r\n        // Assign locked status\r\n\t\tthis.lockedDimension = this.options.lockedDimension;\r\n\t\tthis.lock(this.lockedDimension);\r\n        // Create the joystick and joyring elements\r\n\t\tVYLO.Client.addInterfaceElement(this.joyring, 'mobile-handler-interface', this.joyring.id);\r\n\t\tVYLO.Client.addInterfaceElement(this.joystick, 'mobile-handler-interface', this.joystick.id);\r\n        // Track this controller\r\n\t\tMobileHandler.activeControllers.push(this);\r\n\t\tif (!MobileHandler.eventsAttached) {\r\n\t\t\tconst interfaceCanvas = VYLO.Client.getInterfaceCanvas('mobile-handler-interface', this.joyring.id);\r\n\t\t\t// Set the pointer events to be allowed.\r\n\t\t\tinterfaceCanvas.style.pointerEvents = 'auto';\r\n\t\t\tinterfaceCanvas.style.touchAction = 'auto';\r\n\t\t\t// Put events on the canvas rather than the document\r\n\t\t\tinterfaceCanvas.addEventListener('touchstart', MobileHandler.handleStart.bind(MobileHandler), { 'passive': false });\r\n\t\t\tinterfaceCanvas.addEventListener('touchend', MobileHandler.handleEnd.bind(MobileHandler), { 'passive': false });\r\n\t\t\tinterfaceCanvas.addEventListener('touchcancel', MobileHandler.handleCancel.bind(MobileHandler), { 'passive': false });\r\n\t\t\tinterfaceCanvas.addEventListener('touchmove', MobileHandler.handleMove.bind(MobileHandler), { 'passive': false });\r\n\t\t\r\n\t\t\t// Prevent zooming and mobile gestures\r\n\t\t\tinterfaceCanvas.addEventListener('gesturestart', function(pEvent) {pEvent.preventDefault()}, { 'passive': false });\r\n\t\t\tinterfaceCanvas.addEventListener('gesturechange', function(pEvent) {pEvent.preventDefault()}, { 'passive': false });\r\n\t\t\t/**\r\n\t\t\t * Whether events have been attached to the canvas. Only needs to be done once so this is a boolean checking if it has been done before.\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\tMobileHandler.eventsAttached = true;\r\n\t\t}\r\n\t\tthis.show();\r\n\t}\r\n    /**\r\n     * Tweens the controller to it's inactive alpha preset, or from it's inactive value preset to full alpha.\r\n     * @private\r\n     * @param {boolean} pFade - Whether to fade the joystick to it's inactive alpha preset\r\n     */\r\n\thandleTransition(pFade) {\r\n        let start = { 'alpha': this.joyring.alpha };\r\n        let end;\r\n        const duration = this.options.transitionTime;\r\n        const easing = Tween.easeInOutQuad;\r\n        \r\n\t\tif (this.options.inactiveAlpha || this.options.inactiveAlpha === 0) {\r\n            // Stop any ongoing tween animation\r\n            this.tween.stop();\r\n\t\t\tif (pFade) {\r\n                end = { 'alpha': this.options.inactiveAlpha };\r\n\t\t\t} else {\r\n                end = { 'alpha': 1 };\t\t\t\t\r\n\t\t\t}\r\n            // Makes no sense to tween a animation if the start and end value is the same\r\n            if (start.alpha === end.alpha) return;\r\n            // Animate the transition\r\n            this.tween.build({\r\n                start,\r\n                end,\r\n                duration,\r\n                easing\r\n            }).animate(({ alpha }) => {\r\n                this.joyring.alpha = alpha;\r\n                this.joystick.alpha = alpha;\r\n            });\r\n\t\t}\r\n\t}\r\n    /**\r\n     * Resets the joystick to default.\r\n     * @private\r\n     * @param {*} pSoft - Softly resets the joystick in the event it is hidden\r\n     */\r\n\treset(pSoft) {\r\n\t\tconst angle = this.joystick.anglePoint;\r\n\t\tconst direction = this.joystick.direction;\r\n\t\tthis.joystick.alpha = this.options.inactiveAlpha;\r\n\t\tthis.joystick.startPos.x = this.joystick.startPos.y = 0;\r\n\t\tthis.joystick.direction = 'none';\r\n\t\tthis.joystick.anglePoint = 0;\r\n\t\tthis.joyring.trackedTouches = [];\r\n\t\tthis.joyring.layer = this.options.layer;\r\n\t\tthis.joystick.layer = this.options.layer + 10;\r\n\t\tthis.activeInZone = false;\r\n\t\tthis.controllingFinger = null;\r\n\r\n\t\tif (this.active) {\r\n\t\t\tthis.active = false;\r\n\t\t\tif (typeof(this.onRelease) === 'function') {\r\n\t\t\t\tthis.onRelease(VYLO.Client, angle, direction);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!pSoft) {\r\n\t\t\tthis.onRelease = null;\r\n\t\t\tthis.onMove = null;\r\n\t\t\tthis.onTapStart = null;\r\n\t\t\tif (this.zone) {\r\n\t\t\t\tif (MobileHandler.reservedScreenZones.includes(this.zone)) {\r\n\t\t\t\t\tMobileHandler.reservedScreenZones.splice(MobileHandler.reservedScreenZones.indexOf(this.zone), 1);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.zone === 'left' || this.zone === 'right') {\r\n\t\t\t\t\tMobileHandler.zonedControllers[this.zone] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.zone = null;\r\n\t\t\tthis.type = 'stationary';\r\n\t\t\tthis.lockedDimension = null;\r\n\t\t\tthis.options = {};\r\n\t\t\tif (MobileHandler.touchedDiobs.includes(this.joyring)) {\r\n\t\t\t\tMobileHandler.touchedDiobs.splice(MobileHandler.touchedDiobs.indexOf(this.joyring), 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    /**\r\n     * Builds this controller with the options that were passed in.\r\n     * @param {Object} pOptions - The options of this controller.\r\n     * @param {string} pOptions.type - The way this controller will behave. stationary | traversal | static.\r\n     * @param {number} pOptions.size - The width/height of the joystick. The width & height of the joystick should be the same.\r\n     * @param {Object} pOptions.position - The initial position of the joystick.\r\n     * @param {string} pOptions.position.x - The initial x position of the joystick.\r\n     * @param {string} pOptions.position.x - The initial y position of the joystick.\r\n     * @param {string} pOptions.lockedDimension - The locked dimension of the joystick. both | vertical | horizontal. This is used to lock the joystick from moving in certain dimensions. If this joystick's type is traversal it cannot be locked.\r\n     * @param {string} pOptions.zone - The zone the joystick will occupy. If there is already a controller of the traversal or static type, then you must use a zone. If there is only one controller no zone is needed. left | right This will give each controller equal space on the left / right sides of the screen.\r\n     * @param {number} pOptions.inactiveAlpha - The alpha value the joystick will be when it is considered to be inactive.\r\n     * @param {number} pOptions.transitionTime - How long it takes in ms to transition to the inactiveAlpha value.\r\n     * @param {number} pOptions.scale - The scale you want the joystick controller to be.\r\n     * @param {number} pOptions.plane - The plane of the joystick controller.\r\n     * @param {number} pOptions.layer - The layer of the joystick controller.\r\n     * @param {string} pOptions.atlasName - The atlasName of the joystick.\r\n     * @param {string} pOptions.joystickIconName - The iconName of the joystick.\r\n     * @param {string} pOptions.joyringIconName - The iconName of the joyring.\r\n     * @param {Object} pOptions.callback - An object holding options callbacks to attach to events the joystick emits. \r\n     * pOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\r\n     * pOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\r\n     * pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     * @param {Object} pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     * @param {Function} pOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\r\n     * @param {Function} pOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\r\n     * @param {Function} pOptions.callback.onMove - Callback to be called when the joystick is moved.\r\n     */\r\n\tbuild(pOptions = { 'type': 'stationary', 'size': 100, 'position': { 'x': 100, 'y': 100 }, 'lockedDimension': null, 'zone': null, 'inactiveAlpha': 0.5, 'transitionTime': 500, 'scale': 1, 'plane': 1, 'layer': 1, 'atlasName': '', 'joystickIconName': '', 'joyringIconName': '', 'callback': { 'onTapStart': null, 'onRelease': null, 'onMove': null } }) {\r\n\t\tif (!this.joyring && !this.joystick) {\r\n\t\t\tconst joyring = VYLO.newDiob('Interface');\r\n\t\t\tconst joystick = VYLO.newDiob('Interface');\r\n\t\t\tthis.joyring = joyring;\r\n\t\t\tthis.joystick = joystick;\r\n\t\t}\r\n\t\t// pOptions.size is the size of the joyring, the inner ring will be 50% of this size.\r\n\t\t// pOptions.position is the position for the joyring, the inner ring will be positioned inside.\r\n\t\tif (!Number.isInteger(pOptions.size)) {\r\n\t\t\tpOptions.size = 100;\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\t// the type of the controller\r\n\t\tif (typeof(pOptions.type) === 'string') {\r\n\t\t\tif (pOptions.type !== 'traversal' && pOptions.type !== 'static' && pOptions.type !== 'stationary') {\r\n\t\t\t\tpOptions.type = 'stationary';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpOptions.type = 'stationary';\r\n\t\t\t// warning\r\n\t\t}\r\n\t\t\r\n\t\tif (pOptions.type === 'traversal' || pOptions.type === 'static') {\r\n\t\t\t// if there is already a controller taking up a space, then you must use a zone. If there is no controller, then the entire screen is the zone\r\n\t\t\t// do not define a zone if you know this controller will be the only controller on screen\r\n\t\t\tif (MobileHandler.reservedScreenZones.length) {\r\n\t\t\t\tif (!pOptions.zone || typeof(pOptions.zone) !== 'string' || MobileHandler.reservedScreenZones.includes(pOptions.zone)) {\r\n\t\t\t\t\t// Warning\r\n\t\t\t\t\tMobileHandler.logger.prefix('MobileHandler-Module').error('When using a controller that is of the traversal type, or the static type. A zone is REQUIRED. Only two controllers of traversal or static or one of each can be used at a time. These controllers have to have opposing zones. Left | Right')\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (pOptions.zone === 'left' || pOptions.zone === 'right') {\r\n\t\t\t\tMobileHandler.reservedScreenZones.push(pOptions.zone);\r\n\t\t\t\tMobileHandler.zonedControllers[pOptions.zone] = this;\r\n\t\t\t\tthis.zone = pOptions.zone;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.atlasName) !== 'string') {\r\n\t\t\tpOptions.atlasName = '';\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\t// if the type is traversal it cannot be locked\r\n\t\tif (typeof(pOptions.lockedDimension) !== 'string' || pOptions.type === 'traversal' || (pOptions.lockedDimension !== 'both' && pOptions.lockedDimension !== 'vertical' && pOptions.lockedDimension !== 'horizontal')) {\r\n\t\t\tpOptions.lockedDimension = null;\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.joystickIconName) !== 'string') {\r\n\t\t\tpOptions.joystickIconName = '';\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.joyringIconName) !== 'string') {\r\n\t\t\tpOptions.joyringIconName = '';\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\t// the plane this controller will use\r\n\t\tif (typeof(pOptions.transitionTime) !== 'number') {\r\n\t\t\tpOptions.transitionTime = 500;\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.inactiveAlpha) !== 'number') {\r\n\t\t\tpOptions.inactiveAlpha = 0.5;\r\n\t\t}\r\n\r\n\t\t// Feature coming soon\r\n\t\tif (!Number.isInteger(pOptions.scale)) {\r\n\t\t\tpOptions.scale = 1;\r\n\t\t\t// warning\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.plane) !== 'number') {\r\n\t\t\tpOptions.plane = 1;\r\n\t\t}\r\n\r\n\t\tif (typeof(pOptions.layer) !== 'number') {\r\n\t\t\tpOptions.layer = 1;\r\n\t\t}\r\n\r\n\t\tif (pOptions.position.constructor === Object) {\r\n\t\t\tif (!Number.isInteger(pOptions.position.x)) {\r\n\t\t\t\tpOptions.position.x = 100;\r\n\t\t\t\t// warning\r\n\t\t\t}\r\n\t\t\tif (!Number.isInteger(pOptions.position.y)) {\r\n\t\t\t\tpOptions.position.y = 100;\r\n\t\t\t\t// warning\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpOptions.position = { 'x': 100, 'y': 100 };\r\n\t\t\t// warning\r\n\t\t}\r\n\t\tthis.options = pOptions;\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\tget type() {\r\n\t\treturn this.options.type;\r\n\t}\r\n\r\n\tset type(pNewType) {\r\n\t\tif (pNewType === 'stationary') {\r\n\t\t\tthis.options.type = pNewType;\r\n\t\t}\r\n\t}\r\n    /**\r\n     * Updates the controllers position with the latest information from touch events\r\n     * @private\r\n\t * @param {number} pX - The x position on the screen where the user tapped.\r\n\t * @param {number} pY - The y position on the screen where the user tapped.\r\n     * @param {boolean} pTouchStart - If this was the first time the joystick was touched.\r\n     * @returns \r\n     */\r\n\tupdate(pX, pY, pTouchStart) {\r\n\t\tif (this.lockedDimension === 'both') return;\r\n\t\tif (pTouchStart) {\r\n\t\t\tthis.handleTransition();\r\n\t\t\tif (this.active) {\r\n\t\t\t\tthis.joyring.trackedTouches = [];\r\n\t\t\t}\r\n\t\t\tthis.joyring.layer = MobileHandler.constructor.MAX_LAYER;\r\n\t\t\tthis.joystick.layer = MobileHandler.constructor.MAX_LAYER + 10;\r\n\t\t\tthis.active = true;\r\n\t\t}\r\n\t\tif (this.active) {\r\n\t\t\t// traversal: spawns at the touch position and when dragged, follows the finger across the screen\r\n\t\t\t// static: spawns at the touch position, cannot move from that location, just updates the joystick and will clamp at its limit\r\n\t\t\t// stationary: cannot move from it's position at all, will just update the joystick and clamp it at its limit, can be pressed from anywhere on screen.\r\n\r\n\t\t\tconst touchPos = { 'x': pX - this.joystick.halfSize, 'y': pY - this.joystick.halfSize };\r\n\t\t\t// start position is always the center of the joyring\r\n\t\t\tlet startPos;\r\n\t\t\t// distance is how far away the joystick is from the start position\r\n\t\t\tlet distance;\r\n\t\t\t// angle is the angle in degrees from the start position to the touched position\r\n\t\t\tlet angle;\r\n\t\t\t// clampedDistance is the max distance allowed for the joystick to move\r\n\t\t\tlet clampedDistance;\r\n\t\t\t// clampedPos is the position that was clamped when the joystick tried to go past it's clampedDistance\r\n\t\t\tlet clampedPos;\r\n\r\n\t\t\tif (this.options.type === 'stationary') {\r\n\t\t\t\t// this joystick is stationary therefore the start position is it's default position\r\n\t\t\t\tstartPos = this.joystick.originalPos;\r\n\t\t\t\t// if a certain axis is locked, clamp that position to it's start position\r\n\t\t\t\tif (this.lockedDimension === 'horizontal') {\r\n\t\t\t\t\ttouchPos.y = startPos.y;\r\n\t\t\t\t} else if (this.lockedDimension === 'vertical') {\r\n\t\t\t\t\ttouchPos.x = startPos.x;\r\n\t\t\t\t}\r\n\t\t\t\tdistance = Utils.getDistance(startPos, touchPos);\r\n\t\t\t\tangle = Utils.getAngle(startPos, touchPos);\r\n\t\t\t\tclampedDistance = Math.min(distance, this.joyring.halfSize);\r\n\t\t\t\tclampedPos = Utils.calculateNewPositionFromDistanceAndAngle(startPos, clampedDistance, angle);\r\n\t\t\t\t// set the position to the clamped position so that it is locked to it's clampedPos\r\n\t\t\t\tthis.joystick.setPos(clampedPos.x, clampedPos.y);\r\n\t\t\t} else if (this.options.type === 'traversal' || this.options.type === 'static') {\r\n\t\t\t\t// Position the joystick centered to the position of where the screen was touched if this is the first time touching the joystick\r\n\t\t\t\tif (pTouchStart) {\r\n\t\t\t\t\tthis.joystick.startPos = touchPos;\r\n\t\t\t\t\tthis.joyring.setPos(touchPos.x - this.joystick.halfSize, touchPos.y - this.joystick.halfSize);\r\n\t\t\t\t\tthis.joystick.setPos(touchPos.x, touchPos.y);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.options.type === 'traversal') {\r\n\t\t\t\t\t// the start position for traversal is wherever you pressed on the screen originally\r\n\t\t\t\t\t// the start position was set in the `pTouchStart` portion\r\n\t\t\t\t\tdistance = Utils.getDistance(this.joystick.startPos, touchPos);\r\n\t\t\t\t\tangle = Utils.getAngle(this.joystick.startPos, touchPos);\r\n\t\t\t\t\tclampedDistance = Math.min(distance, this.joyring.halfSize);\r\n\t\t\t\t\tclampedPos = Utils.calculateNewPositionFromDistanceAndAngle(this.joystick.startPos, clampedDistance, angle);\r\n\t\t\t\t\t// set the position to the position touched\r\n\t\t\t\t\tthis.joystick.setPos(touchPos.x, touchPos.y);\r\n\t\t\t\t\t// update the parent to follow the child after it is placed\r\n\t\t\t\t\tconst parentAngle = Utils.getAngle(touchPos, this.joystick.startPos);\r\n\t\t\t\t\tconst parentClampedPos = Utils.calculateNewPositionFromDistanceAndAngle(touchPos, clampedDistance, parentAngle);\r\n\t\t\t\t\tthis.joyring.setPos(parentClampedPos.x - this.joystick.halfSize, parentClampedPos.y - this.joystick.halfSize);\r\n\r\n\t\t\t\t\t// if the distance is greater that the clamped position then we need to update the start position of the joystick\r\n\t\t\t\t\tif (distance > clampedDistance) {\r\n\t\t\t\t\t\tthis.joystick.startPos.x = this.joyring.xPos + this.joystick.halfSize;\r\n\t\t\t\t\t\tthis.joystick.startPos.y = this.joyring.yPos + this.joystick.halfSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (this.options.type === 'static') {\r\n\t\t\t\t\t// the start position for static is wherever you pressed on the screen originally\r\n\t\t\t\t\t// the start position set in the `pTouchStart` portion\r\n\t\t\t\t// if a certain axis is locked, clamp that position to it's start position\r\n\t\t\t\t\tif (this.lockedDimension === 'horizontal') {\r\n\t\t\t\t\t\ttouchPos.y = this.joystick.startPos.y;\r\n\t\t\t\t\t} else if (this.lockedDimension === 'vertical') {\r\n\t\t\t\t\t\ttouchPos.x = this.joystick.startPos.x;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdistance = Utils.getDistance(this.joystick.startPos, touchPos);\r\n\t\t\t\t\tangle = Utils.getAngle(this.joystick.startPos, touchPos);\r\n\t\t\t\t\tclampedDistance = Math.min(distance, this.joyring.halfSize);\r\n\t\t\t\t\tclampedPos = Utils.calculateNewPositionFromDistanceAndAngle(this.joystick.startPos, clampedDistance, angle);\r\n\t\t\t\t\t// set the position to the clamped position so that it is locked\r\n\t\t\t\t\tthis.joystick.setPos(clampedPos.x, clampedPos.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// set the angle point for reading (-1 is to convert it for use in an environment where up is down, and down is up)\r\n\t\t\tthis.joystick.anglePoint = Utils.convertRaWAngleToVyloCoords(angle);\r\n\t\t\t// set the direction for reading\r\n\t\t\tthis.joystick.direction = Math.round(Math.abs(clampedDistance)) < (this.joyring.halfSize / 8) ? 'none' : Utils.getDirection(this.joystick.anglePoint);\r\n\r\n\t\t\tif (this.onMove && typeof(this.onMove) === 'function') {\r\n\t\t\t\tthis.onMove(VYLO.Client, this.joystick.anglePoint, this.joystick.direction);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    /**\r\n     * API called when this joystick is released\r\n     * @private\r\n     */\r\n\trelease() {\r\n\t\tif (this.lockedDimension === 'both') return;\r\n\t\tthis.reset(true);\r\n        // Reset the position to the default position\r\n\t\tthis.joyring.setPos(this.joyring.originalPos.x, this.joyring.originalPos.y);\r\n\t\tthis.joystick.setPos(this.joystick.originalPos.x, this.joystick.originalPos.y);\r\n\t\tthis.handleTransition(true);\r\n\t}\r\n    /**\r\n     * Locks a joystick from moving in a certain dimension or both\r\n     * @param {string} pDimension - The dimension to lock. both | vertical | horizontal\r\n     */\r\n\tlock(pDimension) {\r\n        if (pDimension) {\r\n            pDimension = pDimension.toLowerCase();\r\n        }\r\n\t\tif (typeof(pDimension) === 'string') {\r\n\t\t\tif (pDimension === 'horizontal') {\r\n\t\t\t\tthis.lockedDimension = 'horizontal';\r\n\t\t\t} else if (pDimension === 'vertical') {\r\n\t\t\t\tthis.lockedDimension = 'vertical';\r\n\t\t\t} else {\r\n\t\t\t\tthis.lockedDimension = 'both';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    /**\r\n     * Unlocks the joystick from being locked in the passed dimension.\r\n     * @param {string} pDimension - The dimension to unlock. both | vertical | horizontal\r\n     */\r\n\tunlock(pDimension) {\r\n        if (pDimension) {\r\n            pDimension = pDimension.toLowerCase();\r\n        }\r\n\t\tif (typeof(pDimension) === 'string') {\r\n\t\t\tif (pDimension === 'horizontal') {\r\n\t\t\t\tif (this.lockedDimension === 'both') {\r\n\t\t\t\t\tthis.lockedDimension = 'vertical';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.lockedDimension = null;\r\n\t\t\t\t}\r\n\t\t\t} else if (pDimension === 'vertical') {\r\n\t\t\t\tif (this.lockedDimension === 'both') {\r\n\t\t\t\t\tthis.lockedDimension = 'horizontal';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.lockedDimension = null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.lockedDimension = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    /**\r\n     * Returns the components that make up this controller. Which are the joystick element, and the joyring element.\r\n     * @returns {Object} - An object containing references to the joytick and the joyring that makeup this controller.\r\n     */\r\n\tgetComponents() {\r\n\t\treturn { 'joystick': this.joystick, 'joyring': this.joyring };\r\n\t}\r\n    /**\r\n     * Hides this controller\r\n     */\r\n\thide() {\r\n\t\tthis.joyring.hide();\r\n\t\tthis.joystick.hide();\r\n\t\tthis.reset(true);\r\n\t}\r\n    /**\r\n     * Shows this controllers\r\n     */\r\n\tshow() {\r\n\t\tthis.joyring.setPos(this.joyring.originalPos.x, this.joyring.originalPos.y);\r\n\t\tthis.joystick.setPos(this.joystick.originalPos.x, this.joystick.originalPos.y);\r\n\t\tthis.joyring.show();\r\n\t\tthis.joystick.show();\r\n\t\tthis.handleTransition(true);\r\n\t}\r\n}",
    "static": true,
    "longname": "C:/Users/jared/Documents/Github/MobileHandler/src/controller.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Controller",
    "memberof": "src/controller.mjs",
    "static": true,
    "longname": "src/controller.mjs~Controller",
    "access": "public",
    "export": true,
    "importPath": "mobile-handler/src/controller.mjs",
    "importStyle": "{Controller}",
    "description": "When using a controller that is of the traversal type, or the static type\na zone is REQUIRED. Only two controllers of traversal or static or one of each can be used at a time. \nThese controllers have to have opposing zones. Left | Right\nTraversal: spawns at the touch position and when dragged, follows the finger across the screen\nStatic: spawns at the touch position, cannot move from that location, just updates the joystick and will clamp at its limit\nStationary: cannot move from it's position at all, will just update the joystick and clamp it at its limit, can be pressed from anywhere on screen.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "tween",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#tween",
    "access": "public",
    "description": "A reference to the tween instance this controller uses to tween the alpha when it becomes inactive.\nThis reference is so that developers can pause this tween and resume it when needed.\nCalling this.tween.pause() and this.tween.resume() for instance when pausing and unpausing the game.",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#constructor",
    "access": "public",
    "description": "Builds this controller with the options that were passed in.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions",
        "description": "The options of this controller."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.type",
        "description": "The way this controller will behave. stationary | traversal | static."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.size",
        "description": "The width/height of the joystick. The width & height of the joystick should be the same."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position",
        "description": "The initial position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position.x",
        "description": "The initial x position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position.x",
        "description": "The initial y position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.lockedDimension",
        "description": "The locked dimension of the joystick. both | vertical | horizontal. This is used to lock the joystick from moving in certain dimensions. If this joystick's type is traversal it cannot be locked."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.zone",
        "description": "The zone the joystick will occupy. If there is already a controller of the traversal or static type, then you must use a zone. If there is only one controller no zone is needed. left | right This will give each controller equal space on the left / right sides of the screen."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.inactiveAlpha",
        "description": "The alpha value the joystick will be when it is considered to be inactive."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.transitionTime",
        "description": "How long it takes in ms to transition to the inactiveAlpha value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.scale",
        "description": "The scale you want the joystick controller to be."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.plane",
        "description": "The plane of the joystick controller."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.layer",
        "description": "The layer of the joystick controller."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.atlasName",
        "description": "The atlasName of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.joystickIconName",
        "description": "The iconName of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.joyringIconName",
        "description": "The iconName of the joyring."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback",
        "description": "An object holding options callbacks to attach to events the joystick emits. \npOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\npOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\npOptions.callback.onMove - Callback to be called when the joystick is moved."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onMove",
        "description": "Callback to be called when the joystick is moved."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onTapStart",
        "description": "Callback to be called when the joystick is touched after being released."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onRelease",
        "description": "Callback to be called when the joystick is released and no longer held."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onMove",
        "description": "Callback to be called when the joystick is moved."
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "joyring",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#joyring",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "joystick",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#joystick",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "options",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#options",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "lockedDimension",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#lockedDimension",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "setup",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#setup",
    "access": "private",
    "description": "",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "onTapStart",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#onTapStart",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "onRelease",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#onRelease",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "onMove",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#onMove",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "handleTransition",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#handleTransition",
    "access": "private",
    "description": "Tweens the controller to it's inactive alpha preset, or from it's inactive value preset to full alpha.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pFade",
        "description": "Whether to fade the joystick to it's inactive alpha preset"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "reset",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#reset",
    "access": "private",
    "description": "Resets the joystick to default.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pSoft",
        "description": "Softly resets the joystick in the event it is hidden"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "activeInZone",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#activeInZone",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "controllingFinger",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#controllingFinger",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "active",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#active",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "zone",
    "memberof": "src/controller.mjs~Controller",
    "static": false,
    "longname": "src/controller.mjs~Controller#zone",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "build",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#build",
    "access": "public",
    "description": "Builds this controller with the options that were passed in.",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions",
        "description": "The options of this controller."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.type",
        "description": "The way this controller will behave. stationary | traversal | static."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.size",
        "description": "The width/height of the joystick. The width & height of the joystick should be the same."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position",
        "description": "The initial position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position.x",
        "description": "The initial x position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.position.x",
        "description": "The initial y position of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.lockedDimension",
        "description": "The locked dimension of the joystick. both | vertical | horizontal. This is used to lock the joystick from moving in certain dimensions. If this joystick's type is traversal it cannot be locked."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.zone",
        "description": "The zone the joystick will occupy. If there is already a controller of the traversal or static type, then you must use a zone. If there is only one controller no zone is needed. left | right This will give each controller equal space on the left / right sides of the screen."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.inactiveAlpha",
        "description": "The alpha value the joystick will be when it is considered to be inactive."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.transitionTime",
        "description": "How long it takes in ms to transition to the inactiveAlpha value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.scale",
        "description": "The scale you want the joystick controller to be."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.plane",
        "description": "The plane of the joystick controller."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.layer",
        "description": "The layer of the joystick controller."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.atlasName",
        "description": "The atlasName of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.joystickIconName",
        "description": "The iconName of the joystick."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.joyringIconName",
        "description": "The iconName of the joyring."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback",
        "description": "An object holding options callbacks to attach to events the joystick emits. \npOptions.callback.onTapStart - Callback to be called when the joystick is touched after being released.\npOptions.callback.onRelease - Callback to be called when the joystick is released and no longer held.\npOptions.callback.onMove - Callback to be called when the joystick is moved."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onMove",
        "description": "Callback to be called when the joystick is moved."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onTapStart",
        "description": "Callback to be called when the joystick is touched after being released."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onRelease",
        "description": "Callback to be called when the joystick is released and no longer held."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions.callback.onMove",
        "description": "Callback to be called when the joystick is moved."
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "type",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#type",
    "access": "public",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "set",
    "name": "type",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#type",
    "access": "public",
    "description": null,
    "lineNumber": 346,
    "undocument": true
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "update",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#update",
    "access": "private",
    "description": "Updates the controllers position with the latest information from touch events",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pX",
        "description": "The x position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pY",
        "description": "The y position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pTouchStart",
        "description": "If this was the first time the joystick was touched."
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "release",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#release",
    "access": "private",
    "description": "API called when this joystick is released",
    "lineNumber": 462,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "lock",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#lock",
    "access": "public",
    "description": "Locks a joystick from moving in a certain dimension or both",
    "lineNumber": 474,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDimension",
        "description": "The dimension to lock. both | vertical | horizontal"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "unlock",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#unlock",
    "access": "public",
    "description": "Unlocks the joystick from being locked in the passed dimension.",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDimension",
        "description": "The dimension to unlock. both | vertical | horizontal"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getComponents",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#getComponents",
    "access": "public",
    "description": "Returns the components that make up this controller. Which are the joystick element, and the joyring element.",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - An object containing references to the joytick and the joyring that makeup this controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object containing references to the joytick and the joyring that makeup this controller."
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "hide",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#hide",
    "access": "public",
    "description": "Hides this controller",
    "lineNumber": 524,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "show",
    "memberof": "src/controller.mjs~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controller.mjs~Controller#show",
    "access": "public",
    "description": "Shows this controllers",
    "lineNumber": 532,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/mobile-handler.mjs",
    "content": "import { Utils } from './vendor/utils.min.mjs';\r\nimport { Logger } from './vendor/logger.min.mjs';\r\nimport { Pulse } from './vendor/pulse.min.mjs';\r\nimport { Controller } from './controller.mjs'\r\n/** \r\n * @file The MobileHandler module provides a user-friendly interface for game developers to integrate touch-based controls for their game characters on mobile devices. It offers features for creating a visual joystick on the screen and facilitates mobile device interaction, including accessing device information and triggering device vibrations.\r\n * \r\n * @author https://github.com/doubleactii\r\n * @license MobileHandler is free software, available under the terms of a MIT style License.\r\n * When lowpower mode is on it makes game run slower, from 60fps to 30fps\r\n */\r\nclass MobileHandlerSingleton {\r\n\t/**\r\n\t * Whether or not an instance can be touched by multiple fingers. If their touchOpacity is set to MULTI_TOUCH it can be interacted with multiple times via different touches.\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tstatic MULTI_TOUCH = 2;\r\n\t/**\r\n\t * Whether or not an instance can be touched or not. If their touchOpacity is set to NO_TOUCH, it cannot be touched\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tstatic NO_TOUCH = 0;\r\n\t/**\r\n\t * The max number of controllers that can be recycled\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tstatic MAX_RECYCLED_CONTROLLERS = 10;\r\n\t/**\r\n\t * The maximum layer\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\tstatic MAX_LAYER = 1999998;\r\n\t/**\r\n\t * An array of all controllers that have been recycled\r\n\t * @private\r\n\t * @type {Array}\r\n\t */\r\n\trecycledControllers = [];\r\n\t/**\r\n\t * An array of all controllers that are active\r\n\t * @private\r\n\t * @type {Array}\r\n\t */\r\n\tactiveControllers = [];\r\n\t/**\r\n\t * An object holding the controllers in zones\r\n\t * @private\r\n\t * @type {Object}\r\n\t */\r\n\tzonedControllers = {};\r\n\t/**\r\n\t * An array that holds all the diobs that are currently being touched\r\n\t * @private\r\n\t * @type {Array}\r\n\t */\r\n\ttouchedDiobs = [];\r\n\t/**\r\n\t * An object that stores the mapPosition over the screen\r\n\t * @private\r\n\t * @type {Object}\r\n\t */\r\n\tmapPositionObject = { 'x': 0, 'y': 0 };\r\n\t/**\r\n\t * An array that holds the current screen zones taken, 'left' or 'right'.\r\n\t * @private\r\n\t * @type {Array}\r\n\t */\r\n\treservedScreenZones = [];\r\n\t/**\r\n\t * An object holding the current window size\r\n\t * @private\r\n\t * @type {Object}\r\n\t */\r\n\twindowSize = VYLO.World.getGameSize();\r\n\t/**\r\n\t * The middle of the screen's x coordinate. This is used to figure out which side of the screen is being interacted with.\r\n\t * @private\r\n\t * @type {number}\r\n\t */\r\n\txCenterScreenPosition = this.windowSize.width / 2;\r\n\t/**\r\n\t * Whether a mobile device was detected\r\n\t * @private\r\n\t * @type {boolean}\r\n\t */\r\n\tisMobile = false;\r\n\tconstructor() {\r\n        /** The logger module this module uses to log errors / logs\r\n         * @private\r\n         * @type {Object}\r\n         */\r\n        this.logger = new Logger();\r\n        this.logger.registerType('MobileHandler-Module', '#ff6600');\r\n\t\t// Regex to check if it matches a mobile device\r\n\t\tif(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0,4))) {\r\n\t\t\tthis.isMobile = true;\r\n\t\t}\r\n\t\t// Create and show the mobile handler interface that our controllers will exist in\r\n\t\tVYLO.Client.createInterface('mobile-handler-interface');\r\n\t\tVYLO.Client.showInterface('mobile-handler-interface');\r\n\t\t// Attach our window resize handler event to the onWindowResize event\r\n\t\tPulse.on(VYLO.Client, 'onWindowResize', this.windowResizeHandler.bind(this));\r\n\r\n\t\t// Make a style element\r\n\t\tconst styleElement = document.createElement('style');\r\n\r\n\t\t// Set the inset variables so we can reference them in JS\r\n\t\tstyleElement.textContent = `\r\n\t\t\t:root {\r\n\t\t\t--safe-area-inset-top: env(safe-area-inset-top);\r\n\t\t\t--safe-area-inset-right: env(safe-area-inset-right);\r\n\t\t\t--safe-area-inset-bottom: env(safe-area-inset-bottom);\r\n\t\t\t--safe-area-inset-left: env(safe-area-inset-left);\r\n\t\t\t}\r\n\t\t`;\r\n\r\n\t\t// Append the style element to the document head\r\n\t\tdocument.head.appendChild(styleElement);\r\n\r\n        // Get the styles attached to the root element (we stored the env variables for the safe area);\r\n        const rootStyles = getComputedStyle(document.documentElement);\r\n\r\n        // Get the safe areas that were computed so we can store them for calculations for our UI\r\n        const safeAreaInsetTop = parseInt(rootStyles.getPropertyValue('--safe-area-inset-top').replace('px', ''));\r\n        const safeAreaInsetRight = parseInt(rootStyles.getPropertyValue('--safe-area-inset-right').replace('px', ''));\r\n        const safeAreaInsetBottom = parseInt(rootStyles.getPropertyValue('--safe-area-inset-bottom').replace('px', ''));\r\n        const safeAreaInsetLeft = parseInt(rootStyles.getPropertyValue('--safe-area-inset-left').replace('px', ''));\r\n\r\n\t\t/**\r\n\t\t * An object containing the safe area offset values to account for the notch on notch enabled devices. This will keep the UI in a safe area\r\n\t\t * The safe-area-inset-* variables are four environment variables that define a rectangle by its top, right, bottom, and left insets from the edge of the viewport, \r\n\t\t * which is safe to put content into without risking it being cut off by the shape of a non‑rectangular display. \r\n\t\t * For rectangular viewports, like your average laptop monitor, their value is equal to zero. \r\n\t\t * For non-rectangular displays — like a round watch face — the four values set by the user agent form a rectangle such that all content inside the rectangle is visible.\r\n\t\t * https://developer.mozilla.org/en-US/docs/Web/CSS/env\r\n\t\t * @private\r\n\t\t * @property {boolean} top - safeAreaInsetTop.\r\n\t\t * @property {boolean} right - safeAreaInsetRight.\r\n\t\t * @property {boolean} bottom - safeAreaInsetBottom.\r\n\t\t * @property {boolean} left - safeAreaInsetLeft.\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.safeAreaValues = {\r\n\t\t\ttop: safeAreaInsetTop,\r\n\t\t\tright: safeAreaInsetRight,\r\n\t\t\tbottom: safeAreaInsetBottom,\r\n\t\t\tleft: safeAreaInsetLeft\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * An object containing the safe area offset values to account for the notch on notch enabled devices. This will keep the UI in a safe area\r\n\t * The safe-area-inset-* variables are four environment variables that define a rectangle by its top, right, bottom, and left insets from the edge of the viewport, \r\n\t * which is safe to put content into without risking it being cut off by the shape of a non‑rectangular display. \r\n\t * For rectangular viewports, like your average laptop monitor, their value is equal to zero. \r\n\t * For non-rectangular displays — like a round watch face — the four values set by the user agent form a rectangle such that all content inside the rectangle is visible.\r\n\t * https://developer.mozilla.org/en-US/docs/Web/CSS/env\r\n\t * @private\r\n\t * @property {boolean} top - safeAreaInsetTop.\r\n\t * @property {boolean} right - safeAreaInsetRight.\r\n\t * @property {boolean} bottom - safeAreaInsetBottom.\r\n\t * @property {boolean} left - safeAreaInsetLeft.\r\n\t * @returns {Object} The safe area inset values\r\n\t */\r\n\tgetSafeAreaInsets() {\r\n\t\treturn { ...this.safeAreaValues };\r\n\t}\r\n\t/**\r\n\t * Short hand for getting the safe area inset for the top of the screen.\r\n\t * @returns {number}\r\n\t */\r\n\tgetSafeAreaTop() {\r\n\t\treturn this.safeAreaValues.top;\r\n\t}\r\n\t/**\r\n\t * Short hand for getting the safe area inset for the bottom of the screen.\r\n\t * @returns {number}\r\n\t */\r\n\tgetSafeAreaBottom() {\r\n\t\treturn this.safeAreaValues.bottom;\r\n\t}\r\n\t/**\r\n\t * Short hand for getting the safe area inset for the left of the screen.\r\n\t * @returns {number}\r\n\t */\r\n\tgetSafeAreaLeft() {\r\n\t\treturn this.safeAreaValues.left;\r\n\t}\r\n\t/**\r\n\t * Short hand for getting the safe area inset for the right of the screen.\r\n\t * @returns {number}\r\n\t */\r\n\tgetSafeAreaRight() {\r\n\t\treturn this.safeAreaValues.right;\r\n\t}\r\n\t/**\r\n\t * Return the type of device.\r\n\t * @returns The type of device. Android / Ipad / Iphone\r\n\t */\r\n\tgetDevice() {\r\n\t\tif ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 ) {\r\n\t\t\treturn 'iPhone'; \r\n\t\t} else if(navigator.userAgent.indexOf('iPad') > 0) {\r\n\t\t\treturn 'iPad';\r\n\t\t} else if(navigator.userAgent.indexOf('Android') > 0) {\r\n\t\t\treturn 'Android';\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Vibrates the mobile device.\r\n\t * https://github.com/apache/cordova-plugin-vibration#readme\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API\r\n\t * @param {number} pDuration - The duration of the vibration.\r\n\t */\r\n\tvibrate(pDuration = 500) {\r\n\t\tif (typeof(navigator) !== 'undefined') {\r\n\t\t\tif (navigator.vibrate) {\r\n\t\t\t\tnavigator.vibrate(pDuration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Gets the device's current RAM\r\n\t * @returns The device's current RAM\r\n\t */\r\n\tgetDeviceRAM() {\r\n\t\tif (typeof(navigator) !== 'undefined') {\r\n\t\t\treturn navigator.deviceMemory;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Creates a controller component with the passed options.\r\n\t * @param {Object} pOptions - Options to control how the controller component works.\r\n\t * @returns {Controller} A new controller component\r\n\t */\r\n\tcreateController(pOptions) {\r\n\t\tif (this.recycledControllers.length) {\r\n\t\t\tconst controller = this.recycledControllers.pop();\r\n\t\t\tcontroller.build(pOptions);\r\n\t\t\treturn controller;\r\n\t\t}\r\n\t\treturn new Controller(pOptions);\r\n\t}\r\n\r\n\t/**\r\n\t * Handler event for when the window resizes.\r\n\t * @private\r\n\t * @param {number} pWidth - The window's new width.\r\n\t * @param {number} pHeight - The window's new height.\r\n\t */\r\n\twindowResizeHandler(pWidth, pHeight) {\r\n\t\tthis.xCenterScreenPosition = pWidth / 2;\r\n\t\tthis.windowSize.width = pWidth;\r\n\t\tthis.windowSize.height = pHeight;\r\n\t\tfor (const controller of this.activeControllers) {\r\n\t\t\tconst components = controller.getComponents();\r\n\t\t\tif (components.joyring.edgeLock) {\r\n\t\t\t\tcomponents.joyring.originalPos = { 'x': components.joyring.xPos, 'y': components.joyring.yPos };\r\n\t\t\t}\r\n\t\t\tif (components.joystick.edgeLock) {\r\n\t\t\t\tcomponents.joystick.originalPos = { 'x': components.joystick.xPos, 'y': components.joystick.yPos };\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t/**\r\n\t * Gets the instance that the user tapped if there was one.\r\n\t * @private\r\n\t * @param {number} pX - The x position on the screen where the user tapped.\r\n\t * @param {number} pY - The y position on the screen where the user tapped.\r\n\t * @returns {Object} The instance that was tapped or null if nothing was touched.\r\n\t */\r\n\tgetDiobUnderFinger(pX, pY) {\r\n\t\tconst screenScale = VYLO.Client.getScreenScale();\r\n\t\tconst mapVector = VYLO.Client.getPosFromScreen(pX / screenScale.x, pY / screenScale.y);\r\n\t\tlet mapDiobs;\r\n\t\tif (!VYLO.Client.mob) return;\r\n\t\tif (!VYLO.Client.mob.mapName) {\r\n\t\t\tmapDiobs = [];\r\n\t\t} else {\r\n\t\t\tmapDiobs = VYLO.Map.getDiobsByPos(VYLO.Client.mob.mapName, mapVector.x, mapVector.y);\r\n\t\t}\r\n\t\tconst screenDiobs = VYLO.Client.getInterfaceElementsFromScreen(pX, pY, null, null, null, null, true);\r\n\t\tlet highestLayeredScreenDiob;\r\n\t\tlet highestLayedMapDiob;\r\n\r\n\t\tfor (let i = 0; i < screenDiobs.length; i++) {\r\n\t\t\tif (screenDiobs[i].touchOpacity || (screenDiobs[i].touchOpacity === undefined && screenDiobs[i].type !== 'Interface/EMobile/Joyring')) {\r\n\t\t\t\tif (!highestLayeredScreenDiob) {\r\n\t\t\t\t\thighestLayeredScreenDiob = screenDiobs[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (screenDiobs[i].layer >= highestLayeredScreenDiob.layer) {\r\n\t\t\t\t\thighestLayeredScreenDiob = screenDiobs[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Interface elements\r\n\t\tif (highestLayeredScreenDiob) {\r\n\t\t\t// If the interface is not currently shown, or the element that was \"tapped\" is not shown then we return that nothing was found.\r\n\t\t\tif (!VYLO.Client.checkInterfaceShown(highestLayeredScreenDiob.getInterfaceName()) || highestLayeredScreenDiob.isHidden) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else {\r\n\t\t\t\treturn highestLayeredScreenDiob;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!VYLO.Client.mob.mapName) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t/**\r\n\t\t * @todo Make highest layer take the tap\r\n\t\t */\r\n\t\tfor (let j = 0; j < mapDiobs.length; j++) {\r\n\t\t\tif (mapDiobs[j].touchOpacity) {\r\n\t\t\t\treturn mapDiobs[j];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\t/**\r\n\t * Handles when a finger is placed onto the screen in a zone\r\n\t * @private\r\n\t * @param {number} pX - The x position on the screen where the user tapped.\r\n\t * @param {number} pY - The y position on the screen where the user tapped.\r\n\t * @param {string} pFingerID - The ID of the finger\r\n\t * @returns \r\n\t */\r\n\thandleZoneTouch(pX, pY, pFingerID) {\r\n\t\t// When a finger is placed onto the screen, if it is a zoned controller track it and update it\r\n\t\tif (this.reservedScreenZones.length) {\r\n\t\t\tconst rightZoneController = this.zonedControllers['right'];\r\n\t\t\tconst leftZoneController = this.zonedControllers['left'];\r\n\t\t\t// if the screen is pressed on the right|left side and if the right|left zone controller is not active\r\n\t\t\t// or if the right|left zone controller is a traversal controller, then assign the finger ID to the controller\r\n\t\t\t// and update it\r\n\t\t\t// traversal controllers can update their tracked finger and position when another finger takes over\r\n\t\t\tif (pX > this.xCenterScreenPosition && rightZoneController) {\r\n\t\t\t\tif (!rightZoneController.activeInZone || rightZoneController.type === 'traversal') {\r\n\t\t\t\t\trightZoneController.controllingFinger = pFingerID;\r\n\t\t\t\t\trightZoneController.activeInZone = true;\r\n\t\t\t\t\trightZoneController.update(pX, pY, true);\r\n\t\t\t\t}\r\n\t\t\t} else if (pX < this.xCenterScreenPosition && leftZoneController) {\r\n\t\t\t\tif (!leftZoneController.activeInZone || leftZoneController.type === 'traversal') {\r\n\t\t\t\t\tleftZoneController.controllingFinger = pFingerID;\r\n\t\t\t\t\tleftZoneController.activeInZone = true;\r\n\t\t\t\t\tleftZoneController.update(pX, pY, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// if there are no established zones, and there is a static controller or a traversal controller created then those types of controllers can \r\n\t\t\t// use the entire screen as their zone. Only one of these controllers can control the entire screen. If more than one of these controllers are created then zones will be needed.\r\n\t\t\tfor (const controller of this.activeControllers) {\r\n\t\t\t\tif ((!controller.activeInZone || controller.type === 'traversal') && (controller.type === 'traversal' || controller.type === 'static')) {\r\n\t\t\t\t\tcontroller.controllingFinger = pFingerID;\r\n\t\t\t\t\tcontroller.activeInZone = true;\r\n\t\t\t\t\tcontroller.update(pX, pY, true);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * When a finger on the screen is removed it checks to see if it belongs to a zoned controller. If so it releases that controller.\r\n\t * @private\r\n\t * @param {string} pFingerID - The ID of the finger.\r\n\t * @returns \r\n\t */\r\n\thandleZoneRelease(pFingerID) {\r\n\t\tif (this.reservedScreenZones.length) {\r\n\t\t\tconst rightZoneController = this.zonedControllers['right'];\r\n\t\t\tconst leftZoneController = this.zonedControllers['left'];\r\n\r\n\t\t\tif (rightZoneController && rightZoneController.controllingFinger === pFingerID && rightZoneController.activeInZone) {\r\n\t\t\t\t// console.log('right zone controller released');\r\n\t\t\t\trightZoneController.release();\r\n\t\t\t} else if (leftZoneController && leftZoneController.controllingFinger === pFingerID && leftZoneController.activeInZone) {\r\n\t\t\t\t// console.log('left zone controller released');\r\n\t\t\t\tleftZoneController.release();\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tfor (const controller of this.activeControllers) {\r\n\t\t\t\tif ((controller.type === 'traversal' || controller.type === 'static') && controller.activeInZone) {\r\n\t\t\t\t\tif (controller.controllingFinger === pFingerID) {\r\n\t\t\t\t\t\tcontroller.release();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * When a finger on the screen moves, check if the fingerID belongs to a zoned controller, if it does update that zoned controller\r\n\t * @private\r\n\t * @param {number} pX - The x position on the screen where the user tapped.\r\n\t * @param {number} pY - The y position on the screen where the user tapped.\r\n\t * @param {string} pFingerID - The ID of the finger\r\n\t */\r\n\thandleZoneMove(pX, pY, pFingerID) {\r\n\t\tif (this.reservedScreenZones.length) {\r\n\t\t\tconst rightZoneController = this.zonedControllers['right'];\r\n\t\t\tconst leftZoneController = this.zonedControllers['left'];\r\n\r\n\t\t\tif (rightZoneController && rightZoneController.controllingFinger === pFingerID && rightZoneController.activeInZone) {\r\n\t\t\t\trightZoneController.update(pX, pY);\r\n\t\t\t} else if (leftZoneController && leftZoneController.controllingFinger === pFingerID && leftZoneController.activeInZone) {\r\n\t\t\t\tleftZoneController.update(pX, pY);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (const controller of this.activeControllers) {\r\n\t\t\t\tif ((controller.type === 'traversal' || controller.type === 'static') && controller.activeInZone) {\r\n\t\t\t\t\tif (controller.controllingFinger === pFingerID) {\r\n\t\t\t\t\t\tcontroller.update(pX, pY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The event function called when a touch starts.\r\n\t * @private\r\n\t * @param {Object} pEvent - Represents an event which takes place in the DOM.\r\n\t */\r\n\thandleStart(pEvent) {\r\n\t\t// Prevent browser default (dragging body around and zooming and etc)\r\n\t\tpEvent.preventDefault();\r\n\r\n\t\tconst touches = pEvent.changedTouches;\r\n\r\n\t\tfor (let i = 0; i < touches.length; i++) {\r\n\t\t\tconst x = Math.floor((touches[i].clientX - mainM.xBodyPos)) / mainM.scaleWidth; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst y = Math.floor((touches[i].clientY - mainM.yBodyPos)) / mainM.scaleHeight; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst touchX = touches[i].clientX;\r\n\t\t\tconst touchY = touches[i].clientY;\r\n\t\t\tconst touchedDiob = this.getDiobUnderFinger(touchX, touchY);\r\n\t\t\tconst fingerID = touches[i].identifier;\r\n\t\t\tlet spriteRelativeX;\r\n\t\t\tlet spriteRelativeY;\r\n\t\t\t\r\n\t\t\t// console.log(fingerID, 'start');\r\n\t\t\t// \tIf you haven't touched a diob, but instead just a space on a screen check if there are any zoned controllers\r\n\t\t\tif (!touchedDiob) {\r\n\t\t\t\tthis.handleZoneTouch(x, y, fingerID);\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof(VYLO.Client.onTapStart) === 'function') {\r\n\t\t\t\tVYLO.Client.onTapStart(touchedDiob, Utils.clamp(touchX, 0, this.windowSize.width), Utils.clamp(touchY, 0, this.windowSize.height), fingerID);\r\n\t\t\t}\r\n\t\t\tif (touchedDiob) {\r\n\t\t\t\tif (touchedDiob.trackedTouches === undefined) {\r\n\t\t\t\t\ttouchedDiob.trackedTouches = [];\r\n\t\t\t\t}\r\n\t\t\t\tif (touchedDiob._slidOff === undefined) {\r\n\t\t\t\t\ttouchedDiob._slidOff = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof(touchedDiob.onTapStart) === 'function') {\r\n\t\t\t\t\t// if you are already touching something, you need `touchOpacity` set to 2 to use `multitouch`\r\n\t\t\t\t\tif (touchedDiob.baseType === 'Interface') {\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(touchX - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(touchY - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tVYLO.Client.getPosFromScreen(touchX, touchY, this.mapPositionObject);\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(this.mapPositionObject.x - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(this.mapPositionObject.y - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttouchedDiob.onTapStart(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t}\r\n\t\t\t\tif (touchedDiob.trackedTouches.length && touchedDiob.touchOpacity === MobileHandlerSingleton.MULTI_TOUCH) {\r\n\t\t\t\t\ttouchedDiob.trackedTouches.push(fingerID);\r\n\t\t\t\t// if you do not have `multitouch` enabled, then you can only touch one thing at a time\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!touchedDiob.trackedTouches.length) {\r\n\t\t\t\t\t\ttouchedDiob.trackedTouches.push(fingerID);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (touchedDiob.isMobileHandlerController) {\r\n\t\t\t\t\tconst joyring = touchedDiob;\r\n\t\t\t\t\tjoyring.controller.update(x, y, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.touchedDiobs.includes(touchedDiob)) {\r\n\t\t\t\t\tthis.touchedDiobs.push(touchedDiob);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The event function called when a touch ends.\r\n\t * @private\r\n\t * @param {Object} pEvent - Represents an event which takes place in the DOM.\r\n\t */\r\n\thandleEnd(pEvent) {\r\n\t\t// Prevent browser default (dragging body around and zooming and etc)\r\n\t\tpEvent.preventDefault();\r\n\r\n\t\tconst touches = pEvent.changedTouches;\r\n\r\n\t\tfor (let i = 0; i < touches.length; i++) {\r\n\t\t\tconst x = Math.floor((touches[i].clientX - mainM.xBodyPos)) / mainM.scaleWidth; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst y = Math.floor((touches[i].clientY - mainM.yBodyPos)) / mainM.scaleHeight; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst touchX = touches[i].clientX;\r\n\t\t\tconst touchY = touches[i].clientY;\r\n\t\t\tconst touchedDiob = this.getDiobUnderFinger(touchX, touchY);\r\n\t\t\tconst fingerID = touches[i].identifier;\r\n\t\t\tlet spriteRelativeX;\r\n\t\t\tlet spriteRelativeY;\r\n\r\n\t\t\t// console.log(fingerID, 'end');\r\n\t\t\tthis.handleZoneRelease(fingerID);\r\n\t\t\t\r\n\t\t\tif (VYLO.Client.onTapEnd && typeof(VYLO.Client.onTapEnd) === 'function') {\r\n\t\t\t\tVYLO.Client.onTapEnd(touchedDiob, Utils.clamp(touchX, 0, this.windowSize.width), Utils.clamp(touchY, 0, this.windowSize.height), touches[i].identifier);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (touchedDiob) {\r\n\t\t\t\tif (touchedDiob.onTapEnd && typeof(touchedDiob.onTapEnd) === 'function') {\r\n\t\t\t\t\tif (touchedDiob.baseType === 'Interface') {\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(touchX - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(touchY - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tVYLO.Client.getPosFromScreen(touchX, touchY, this.mapPositionObject);\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(this.mapPositionObject.x - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(this.mapPositionObject.y - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (touchedDiob.touchOpacity === MobileHandlerSingleton.MULTI_TOUCH) {\r\n\t\t\t\t\t\ttouchedDiob.onTapEnd(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (touchedDiob.trackedTouches) {\r\n\t\t\t\t\t\t\tif (touchedDiob.trackedTouches.length) {\r\n\t\t\t\t\t\t\t\tif (touchedDiob.trackedTouches.includes(fingerID)) {\r\n\t\t\t\t\t\t\t\t\ttouchedDiob.onTapEnd(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find all diobs that you were touching, and call `onTapStop` on them, since the finger that touched them has been removed\r\n\t\t\tfor (let j = this.touchedDiobs.length - 1; j >= 0; j--) {\r\n\t\t\t\tif (this.touchedDiobs[j].trackedTouches) {\r\n\t\t\t\t\tif (this.touchedDiobs[j].trackedTouches.length) {\r\n\t\t\t\t\t\tif (this.touchedDiobs[j].trackedTouches.includes(fingerID)) {\r\n\t\t\t\t\t\t\tthis.touchedDiobs[j].trackedTouches.splice(this.touchedDiobs[j].trackedTouches.indexOf(fingerID), 1);\r\n\t\t\t\t\t\t\tif (this.touchedDiobs[j].onTapStop && typeof(this.touchedDiobs[j].onTapStop) === 'function') {\r\n\t\t\t\t\t\t\t\tif (this.touchedDiobs[j].baseType === 'Interface') {\r\n\t\t\t\t\t\t\t\t\tspriteRelativeX = Utils.clamp(touchX - this.touchedDiobs[j].xPos, 0, this.touchedDiobs[j].width);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeY = Utils.clamp(touchY - this.touchedDiobs[j].yPos, 0, this.touchedDiobs[j].height);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tVYLO.Client.getPosFromScreen(touchX, touchY, this.mapPositionObject);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeX = Utils.clamp(this.mapPositionObject.x - this.touchedDiobs[j].xPos, 0, this.touchedDiobs[j].width);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeY = Utils.clamp(this.mapPositionObject.y - this.touchedDiobs[j].yPos, 0, this.touchedDiobs[j].height);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.touchedDiobs[j].onTapStop(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID); // you tapped this diob, and finally released it (no matter if it was over the diob or not)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.touchedDiobs[j]._slidOff) {\r\n\t\t\t\t\t\t\t\tthis.touchedDiobs[j]._slidOff = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.touchedDiobs[j].isMobileHandlerController) {\r\n\t\t\t\t\t\t\t\tconst joyring = this.touchedDiobs[j];\r\n\t\t\t\t\t\t\t\tif (!joyring.trackedTouches.length) {\r\n\t\t\t\t\t\t\t\t\tjoyring.controller.release();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.touchedDiobs.splice(j, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The event function called when a touch is canceled.\r\n\t * @private\r\n\t * @param {Object} pEvent - Represents an event which takes place in the DOM.\r\n\t */\r\n\thandleCancel(pEvent) {\r\n\t\tthis.handleEnd(pEvent);\r\n\t\t// remove all touchedDiobs since this was a touchCancel event, you must of hit some UI, meaning all fingers should be considered null and void\r\n\t\tfor (let j = this.touchedDiobs.length - 1; j >= 0; j--) {\r\n\t\t\tthis.touchedDiobs[j].trackedTouches = [];\r\n\t\t\tthis.touchedDiobs.splice(j, 1);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The event function called when a touch is moved.\r\n\t * @private\r\n\t * @param {Object} pEvent - Represents an event which takes place in the DOM.\r\n\t */\r\n\thandleMove(pEvent) {\r\n\t\t// Prevent browser default (dragging body around and zooming and etc)\r\n\t\tpEvent.preventDefault();\r\n\r\n\t\tconst touches = pEvent.changedTouches;\r\n\r\n\t\tfor (let i = 0; i < touches.length; i++) {\r\n\t\t\tconst x = Math.floor((touches[i].clientX - mainM.xBodyPos)) / mainM.scaleWidth; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst y = Math.floor((touches[i].clientY - mainM.yBodyPos)) / mainM.scaleHeight; // find a better way to calcuate this value instead of relying on the engine's variable\r\n\t\t\tconst touchX = touches[i].clientX;\r\n\t\t\tconst touchY = touches[i].clientY;\r\n\t\t\tconst touchedDiob = this.getDiobUnderFinger(touchX, touchY);\r\n\t\t\tconst fingerID = touches[i].identifier;\r\n\t\t\tlet spriteRelativeX;\r\n\t\t\tlet spriteRelativeY;\r\n\t\t\t\r\n\t\t\tthis.handleZoneMove(x, y, fingerID);\r\n\r\n\t\t\tif (typeof(VYLO.Client.onTapMove) === 'function') {\r\n\t\t\t\tVYLO.Client.onTapMove(touchedDiob, Utils.clamp(touchX, 0, this.windowSize.width), Utils.clamp(touchY, 0, this.windowSize.height), fingerID);\r\n\t\t\t}\r\n\r\n\t\t\tif (touchedDiob) {\r\n\t\t\t\tif (typeof(touchedDiob.onTapMove) === 'function') {\r\n\t\t\t\t\tif (touchedDiob.baseType === 'Interface') {\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(touchX - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(touchY - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tVYLO.Client.getPosFromScreen(touchX, touchY, this.mapPositionObject);\r\n\t\t\t\t\t\tspriteRelativeX = Utils.clamp(this.mapPositionObject.x - touchedDiob.xPos, 0, touchedDiob.width);\r\n\t\t\t\t\t\tspriteRelativeY = Utils.clamp(this.mapPositionObject.y - touchedDiob.yPos, 0, touchedDiob.height);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (touchedDiob.touchOpacity === MobileHandlerSingleton.MULTI_TOUCH) {\r\n\t\t\t\t\t\ttouchedDiob.onTapMove(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (touchedDiob.trackedTouches) {\r\n\t\t\t\t\t\t\tif (touchedDiob.trackedTouches.length) {\r\n\t\t\t\t\t\t\t\tif (touchedDiob.trackedTouches.includes(fingerID)) {\r\n\t\t\t\t\t\t\t\t\ttouchedDiob.onTapMove(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (const diob of this.touchedDiobs) {\r\n\t\t\t\tif (diob.trackedTouches.includes(fingerID)) {\r\n\t\t\t\t\tif (diob !== touchedDiob) {\r\n\t\t\t\t\t\tif (!diob._slidOff) {\r\n\t\t\t\t\t\t\tif (diob.onTapSlideOff && typeof(diob.onTapSlideOff) === 'function') {\r\n\t\t\t\t\t\t\t\tdiob._slidOff = true;\r\n\t\t\t\t\t\t\t\tif (diob.baseType === 'Interface') {\r\n\t\t\t\t\t\t\t\t\tspriteRelativeX = Utils.clamp(touchX - diob.xPos, 0, diob.width);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeY = Utils.clamp(touchY - diob.yPos, 0, diob.height);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tVYLO.Client.getPosFromScreen(touchX, touchY, this.mapPositionObject);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeX = Utils.clamp(this.mapPositionObject.x - diob.xPos, 0, diob.width);\r\n\t\t\t\t\t\t\t\t\tspriteRelativeY = Utils.clamp(this.mapPositionObject.y - diob.yPos, 0, diob.height);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdiob.onTapSlideOff(VYLO.Client, spriteRelativeX, spriteRelativeY, fingerID);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (diob.isMobileHandlerController) {\r\n\t\t\t\t\t\tconst joyring = diob;\r\n\t\t\t\t\t\tjoyring.controller.update(x, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const MobileHandler = new MobileHandlerSingleton();",
    "static": true,
    "longname": "C:/Users/jared/Documents/Github/MobileHandler/src/mobile-handler.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "MobileHandler",
    "memberof": "src/mobile-handler.mjs",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandler",
    "access": "public",
    "export": true,
    "importPath": "mobile-handler/src/mobile-handler.mjs",
    "importStyle": "{MobileHandler}",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "type": {
      "types": [
        "src/mobile-handler.mjs~MobileHandlerSingleton"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "MobileHandlerSingleton",
    "memberof": "src/mobile-handler.mjs",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "access": "public",
    "export": true,
    "importPath": "mobile-handler/src/mobile-handler.mjs",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "The MobileHandler module provides a user-friendly interface for game developers to integrate touch-based controls for their game characters on mobile devices. It offers features for creating a visual joystick on the screen and facilitates mobile device interaction, including accessing device information and triggering device vibrations."
      },
      {
        "tagName": "@author",
        "tagValue": "https://github.com/doubleactii"
      },
      {
        "tagName": "@license",
        "tagValue": "MobileHandler is free software, available under the terms of a MIT style License.\nWhen lowpower mode is on it makes game run slower, from 60fps to 30fps"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "MULTI_TOUCH",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton.MULTI_TOUCH",
    "access": "private",
    "description": "Whether or not an instance can be touched by multiple fingers. If their touchOpacity is set to MULTI_TOUCH it can be interacted with multiple times via different touches.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "NO_TOUCH",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton.NO_TOUCH",
    "access": "private",
    "description": "Whether or not an instance can be touched or not. If their touchOpacity is set to NO_TOUCH, it cannot be touched",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "MAX_RECYCLED_CONTROLLERS",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton.MAX_RECYCLED_CONTROLLERS",
    "access": "private",
    "description": "The max number of controllers that can be recycled",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "MAX_LAYER",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": true,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton.MAX_LAYER",
    "access": "private",
    "description": "The maximum layer",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "recycledControllers",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#recycledControllers",
    "access": "private",
    "description": "An array of all controllers that have been recycled",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "activeControllers",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#activeControllers",
    "access": "private",
    "description": "An array of all controllers that are active",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "zonedControllers",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#zonedControllers",
    "access": "private",
    "description": "An object holding the controllers in zones",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "touchedDiobs",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#touchedDiobs",
    "access": "private",
    "description": "An array that holds all the diobs that are currently being touched",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "mapPositionObject",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#mapPositionObject",
    "access": "private",
    "description": "An object that stores the mapPosition over the screen",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "reservedScreenZones",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#reservedScreenZones",
    "access": "private",
    "description": "An array that holds the current screen zones taken, 'left' or 'right'.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "windowSize",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#windowSize",
    "access": "private",
    "description": "An object holding the current window size",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "xCenterScreenPosition",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#xCenterScreenPosition",
    "access": "private",
    "description": "The middle of the screen's x coordinate. This is used to figure out which side of the screen is being interacted with.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "isMobile",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#isMobile",
    "access": "private",
    "description": "Whether a mobile device was detected",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "logger",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#logger",
    "access": "private",
    "description": "The logger module this module uses to log errors / logs",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "safeAreaValues",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#safeAreaValues",
    "access": "private",
    "description": "An object containing the safe area offset values to account for the notch on notch enabled devices. This will keep the UI in a safe area\nThe safe-area-inset-* variables are four environment variables that define a rectangle by its top, right, bottom, and left insets from the edge of the viewport, \nwhich is safe to put content into without risking it being cut off by the shape of a non‑rectangular display. \nFor rectangular viewports, like your average laptop monitor, their value is equal to zero. \nFor non-rectangular displays — like a round watch face — the four values set by the user agent form a rectangle such that all content inside the rectangle is visible.\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/env",
    "lineNumber": 147,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "safeAreaInsetTop."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "safeAreaInsetRight."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "safeAreaInsetBottom."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "safeAreaInsetLeft."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "getSafeAreaInsets",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getSafeAreaInsets",
    "access": "private",
    "description": "An object containing the safe area offset values to account for the notch on notch enabled devices. This will keep the UI in a safe area\nThe safe-area-inset-* variables are four environment variables that define a rectangle by its top, right, bottom, and left insets from the edge of the viewport, \nwhich is safe to put content into without risking it being cut off by the shape of a non‑rectangular display. \nFor rectangular viewports, like your average laptop monitor, their value is equal to zero. \nFor non-rectangular displays — like a round watch face — the four values set by the user agent form a rectangle such that all content inside the rectangle is visible.\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/env",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The safe area inset values"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "safeAreaInsetTop."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "safeAreaInsetRight."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "safeAreaInsetBottom."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "safeAreaInsetLeft."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The safe area inset values"
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getSafeAreaTop",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getSafeAreaTop",
    "access": "public",
    "description": "Short hand for getting the safe area inset for the top of the screen.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "getSafeAreaBottom",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getSafeAreaBottom",
    "access": "public",
    "description": "Short hand for getting the safe area inset for the bottom of the screen.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "getSafeAreaLeft",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getSafeAreaLeft",
    "access": "public",
    "description": "Short hand for getting the safe area inset for the left of the screen.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getSafeAreaRight",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getSafeAreaRight",
    "access": "public",
    "description": "Short hand for getting the safe area inset for the right of the screen.",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getDevice",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getDevice",
    "access": "public",
    "description": "Return the type of device.",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The type of device. Android / Ipad / Iphone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The type of device. Android / Ipad / Iphone"
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "vibrate",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#vibrate",
    "access": "public",
    "description": "Vibrates the mobile device.\nhttps://github.com/apache/cordova-plugin-vibration#readme\nhttps://developer.mozilla.org/en-US/docs/Web/API/Vibration_API",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDuration",
        "description": "The duration of the vibration."
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getDeviceRAM",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getDeviceRAM",
    "access": "public",
    "description": "Gets the device's current RAM",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The device's current RAM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The device's current RAM"
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "createController",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#createController",
    "access": "public",
    "description": "Creates a controller component with the passed options.",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Controller} A new controller component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pOptions",
        "description": "Options to control how the controller component works."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": "A new controller component"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "windowResizeHandler",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#windowResizeHandler",
    "access": "private",
    "description": "Handler event for when the window resizes.",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pWidth",
        "description": "The window's new width."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pHeight",
        "description": "The window's new height."
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getDiobUnderFinger",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#getDiobUnderFinger",
    "access": "private",
    "description": "Gets the instance that the user tapped if there was one.",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The instance that was tapped or null if nothing was touched."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pX",
        "description": "The x position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pY",
        "description": "The y position on the screen where the user tapped."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The instance that was tapped or null if nothing was touched."
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "handleZoneTouch",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleZoneTouch",
    "access": "private",
    "description": "Handles when a finger is placed onto the screen in a zone",
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pX",
        "description": "The x position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pY",
        "description": "The y position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pFingerID",
        "description": "The ID of the finger"
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "handleZoneRelease",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleZoneRelease",
    "access": "private",
    "description": "When a finger on the screen is removed it checks to see if it belongs to a zoned controller. If so it releases that controller.",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pFingerID",
        "description": "The ID of the finger."
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "handleZoneMove",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleZoneMove",
    "access": "private",
    "description": "When a finger on the screen moves, check if the fingerID belongs to a zoned controller, if it does update that zoned controller",
    "lineNumber": 407,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pX",
        "description": "The x position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pY",
        "description": "The y position on the screen where the user tapped."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pFingerID",
        "description": "The ID of the finger"
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "handleStart",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleStart",
    "access": "private",
    "description": "The event function called when a touch starts.",
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "Represents an event which takes place in the DOM."
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "handleEnd",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleEnd",
    "access": "private",
    "description": "The event function called when a touch ends.",
    "lineNumber": 500,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "Represents an event which takes place in the DOM."
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "handleCancel",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleCancel",
    "access": "private",
    "description": "The event function called when a touch is canceled.",
    "lineNumber": 585,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "Represents an event which takes place in the DOM."
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "handleMove",
    "memberof": "src/mobile-handler.mjs~MobileHandlerSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/mobile-handler.mjs~MobileHandlerSingleton#handleMove",
    "access": "private",
    "description": "The event function called when a touch is moved.",
    "lineNumber": 598,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEvent",
        "description": "Represents an event which takes place in the DOM."
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# MobileHandler\r\n\r\nThe MobileHandler module provides a user-friendly interface for game developers to integrate touch-based controls for their game characters on mobile devices. It offers features for creating a visual joystick on the screen and facilitates mobile device interaction, including accessing device information and triggering device vibrations.\r\n\r\n\r\n",
    "longname": "C:\\Users\\jared\\Documents\\Github\\MobileHandler\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"mobile-handler\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"The MobileHandler module provides a user-friendly interface for game developers to integrate touch-based controls for their game characters on mobile devices. It offers features for creating a visual joystick on the screen and facilitates mobile device interaction, including accessing device information and triggering device vibrations.\",\r\n  \"main\": \"dist/mobile-handler.min.mjs\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"npx webpack && npm run build:minify && node add-version-script.js && node add-banner-script.js\",\r\n    \"build:minify\": \"uglifyjs dist/mobile-handler.min.mjs -m -c --comments -o dist/mobile-handler.min.mjs\",\r\n    \"build:prod\": \"npx webpack --mode production && npm run build:minify && node add-version-script.js && node add-banner-script.js && npm run build:docs\",\r\n    \"build:docs\": \"esdoc -c esdoc.json\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"https://github.com/doubleactii\",\r\n  \"license\": \"SEE LICENSE IN LICENSE.md\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/EvitcaStudio/MobileHandler.git\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"uglify-js\": \"^3.17.4\",\r\n    \"webpack\": \"^5.89.0\",\r\n    \"webpack-cli\": \"^5.1.4\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\jared\\Documents\\Github\\MobileHandler\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]